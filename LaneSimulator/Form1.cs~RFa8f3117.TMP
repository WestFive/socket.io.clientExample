using Data;
using LaneDataSimulator.util;
using MessageHub;
using MessageHub.Model;
using MessageHub.util;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Windows.Forms;

namespace LaneDataSimulator
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        public NodeUtil nodeUtil = new NodeUtil();
        public JsonUtil jsonUtil = new JsonUtil();

        public Dictionary<string, dynamic> keyValueDic = new Dictionary<string, dynamic>();

        private dynamic lane; //当前车道数据  类型为Lane声明为 dynamic
         
        private dynamic workingJobQueue;//当前作业类型为JobQueue声明为dynamic


        private MessageHubClient messagehubClient;


        /// <summary>
        /// 重新加载左侧节点树
        /// </summary>
        /// <param name="obj"></param>
        /// <param name="tree"></param>
        private void reload(dynamic obj, TreeView tree)
        {
            tree.Nodes.Clear();
            keyValueDic.Clear();
            tree.NodeMouseDoubleClick -= TreeLane_NodeMouseDoubleClick;
            TreeNode RootNode = new TreeNode();
            RootNode.Tag = obj;
            if (typeof(Lane) == obj.GetType())
            {
                RootNode.Name = "lane";
                RootNode.Text = "lane";
            }
            else
            {
                RootNode.Name = "jobQueue";
                RootNode.Text = "jobQueue";
            }
            nodeUtil.AddChildNode(RootNode);
            tree.Nodes.Add(RootNode);
            tree.ExpandAll();
            tree.SelectedNode = RootNode;

            tree.NodeMouseDoubleClick += TreeLane_NodeMouseDoubleClick;
        }
     
        /// <summary>
        /// 双击子节点的事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void TreeLane_NodeMouseDoubleClick(object sender, TreeNodeMouseClickEventArgs e)
        {

            TreeNode selectedNode = ((TreeView)sender).SelectedNode;

            if(tabMain.SelectedIndex==1)//JobQueue选中
            {

            }else//Lane选中
            {
                if (selectedNode.Tag.GetType().FullName == "Newtonsoft.Json.Linq.JArray" || selectedNode.Tag.GetType() == typeof(object))
                {
                     textBoxLaneNodeInfo.Text = JsonUtil.ConvertJsonString(JsonConvert.SerializeObject(selectedNode.Tag));
                    textLaneSend.Enabled = false;
                }
                else
                {
                    textLanePropertie.Text = JsonUtil.ConvertJsonString(JsonConvert.SerializeObject(selectedNode.Tag));
                    textLaneSend.Enabled = true;
                }
            }

            //laneControllerPanel.Controls.Clear();
            //JobQueueControllerPanel.Controls.Clear();

            ////MessageBox.Show(selectedNode.FullPath);
            //if (selectedNode.Tag.GetType().FullName != "Newtonsoft.Json.Linq.JArray" && selectedNode.Tag.GetType() != typeof(object))
            //{

            //    Label label = new Label();
            //    label.Width = 40;
            //    label.Text = selectedNode.Text;
            //    label.Dock = DockStyle.Top;
            //    label.Show();
            //    TextBox text = new TextBox();
            //    text.Multiline = true;
            //    text.Tag = selectedNode.FullPath;

            //    Button button = new Button();
            //    button.Width = 40;
            //    button.Dock = DockStyle.Top;
            //    button.Text = "修改";
            //    button.Tag = text;
            //    button.Click += Button_Click;
            //    button.Show();

            //    text.Height = 220;
            //    text.ScrollBars = ScrollBars.Both;

            //    text.Text = JsonUtil.ConvertJsonString(JsonConvert.SerializeObject(selectedNode.Tag));
            //    text.Dock = DockStyle.Bottom;

            //    text.Show();
            //    if (tabMain.SelectedIndex == 1)
            //    {
            //        JobQueueControllerPanel.Controls.Add(label);
            //        JobQueueControllerPanel.Controls.Add(text);
            //        JobQueueControllerPanel.Controls.Add(button);
            //    }
            //    else
            //    {
            //        laneControllerPanel.Controls.Add(label);
            //        laneControllerPanel.Controls.Add(text);
            //        laneControllerPanel.Controls.Add(button);
            //    }
            //}

        }

        /// <summary>
        /// 点击发送
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Button_Click(object sender, EventArgs e)
        {
            TextBox text = (TextBox)(((Button)sender).Tag);
            string fullpath = text.Tag.ToString();
            string value = text.Text;
            UpdateData(fullpath, value);
            reload(lane, treeLane);
        }


        /// <summary>
        /// 根据点击的节点 获取完整路径 更新具体属性值
        /// </summary>
        /// <param name="fullpath"></param>
        /// <param name="value"></param>
        private void UpdateData(string fullpath, string value)
        {

            List<string> counts = fullpath.Split("\\".ToArray()).ToList();
            if (fullpath.StartsWith("lane"))
            {
                switch (counts.Count)
                {
                    case 1:
                        lane = JsonConvert.DeserializeObject<Lane>(value);
                        break;
                    case 2:
                        value = value.Replace("\"", "");
                        Dictionary<string, dynamic> dic = JsonConvert.DeserializeObject<Dictionary<string, dynamic>>(JsonConvert.SerializeObject(lane));
                        dic[counts.Last()] = value;
                        lane = JsonConvert.DeserializeObject<Lane>(JsonConvert.SerializeObject(dic));
                        break;
                    case 3:
                        int index = Convert.ToInt32(counts.Last());
                        lane.devices[index] = JsonConvert.DeserializeObject<Device>(value);
                        break;
                    case 4:
                        int iindex = Convert.ToInt32(counts[2]);
                        Dictionary<string, dynamic> dic4 = JsonConvert.DeserializeObject<Dictionary<string, dynamic>>(JsonConvert.SerializeObject(lane.devices[iindex]));
                        dic4[counts.Last()] = value.Replace("\"", "");
                        dynamic object4 = JsonConvert.DeserializeObject<Device>(JsonConvert.SerializeObject(dic4));
                        lane.devices[iindex] = object4;
                        break;


                }
                addLog("更新成功,最新的" + counts.Last() + "值：" + value);
                UpdateMessageToMessageHub(MessageType.Lane);
                reload(lane, treeLane);
            }
            else
            {
                switch (counts.Count)
                {
                    case 1:
                        workingJobQueue = JsonConvert.DeserializeObject<JobQueue>(value);
                        break;
                    case 2:
                        value = value.Replace("\"", "");
                        Dictionary<string, dynamic> dic = JsonConvert.DeserializeObject<Dictionary<string, dynamic>>(JsonConvert.SerializeObject(workingJobQueue));
                        dic[counts.Last()] = value;
                        workingJobQueue = JsonConvert.DeserializeObject<JobQueue>(JsonConvert.SerializeObject(dic));
                        break;
                    case 3:
                        int index = Convert.ToInt32(counts.Last());
                        switch (counts[1])
                        {
                            case "containers":
                                workingJobQueue.containers[index] = JsonConvert.DeserializeObject<Data.Container>(value);
                                break;
                            case "pictures":
                                workingJobQueue.pictures[index] = JsonConvert.DeserializeObject<Data.Picture>(value);
                                break;
                            case "process":
                                workingJobQueue.processes[index] = JsonConvert.DeserializeObject<Data.Process>(value);
                                break;

                        }
                        break;
                    case 4:
                        switch (counts[1])
                        {
                            case "containers":
                                int cindex = Convert.ToInt32(counts[2]);
                                Dictionary<string, dynamic> cdic = JsonConvert.DeserializeObject<Dictionary<string, dynamic>>(JsonConvert.SerializeObject(workingJobQueue.containers[cindex]));
                                cdic[counts.Last()] = value.Replace("\"", "");
                                dynamic object4 = JsonConvert.DeserializeObject<Data.Container>(JsonConvert.SerializeObject(cdic));
                                workingJobQueue.containers[cindex] = object4;
                                break;
                            case "pictures":
                                int pindex = Convert.ToInt32(counts[2]);
                                Dictionary<string, dynamic> pdic = JsonConvert.DeserializeObject<Dictionary<string, dynamic>>(JsonConvert.SerializeObject(workingJobQueue.pictures[pindex]));
                                pdic[counts.Last()] = value.Replace("\"", "");
                                dynamic pobject = JsonConvert.DeserializeObject<Picture>(JsonConvert.SerializeObject(pdic));
                                workingJobQueue.pictures[pindex] = pobject;
                                break;
                            case "process":
                                int iindex = Convert.ToInt32(counts[2]);
                                Dictionary<string, dynamic> dic4 = JsonConvert.DeserializeObject<Dictionary<string, dynamic>>(JsonConvert.SerializeObject(workingJobQueue.processes[iindex]));
                                dic4[counts.Last()] = value.Replace("\"", "");
                                dynamic object5 = JsonConvert.DeserializeObject<Process>(JsonConvert.SerializeObject(dic4));
                                workingJobQueue.processes[iindex] = object5;
                                break;

                        }
                        break;
                    case 5:
                        int container_index = Convert.ToInt32(counts[2]);
                        int damages_index = Convert.ToInt32(counts[4]);
                        workingJobQueue.containers[container_index].damages[damages_index] = JsonConvert.DeserializeObject<Damage>(value);
                        break;
                    case 6:

                        int container_index1 = Convert.ToInt32(counts[2]);
                        int damages_index1 = Convert.ToInt32(counts[4]);
                        Dictionary<string, dynamic> lastdic = JsonConvert.DeserializeObject<Dictionary<string, dynamic>>(JsonConvert.SerializeObject(workingJobQueue.containers[container_index1].damages[damages_index1]));
                        lastdic[counts.Last()] = value.Replace("\"", "");
                        dynamic lastobject = JsonConvert.DeserializeObject<Damage>(JsonConvert.SerializeObject(lastdic));
                        workingJobQueue.containers[container_index1].damages[damages_index1] = lastobject;
                        break;


                }
                addLog("更新成功,最新的" + counts.Last() + "值：" + value);
                UpdateMessageToMessageHub(MessageType.JobQueue);
                reload(workingJobQueue, JobQueueTree);
                

            }


        }

       /// <summary>
       /// 更新消息服务
       /// </summary>
       /// <param name="type">更新类型</param>
       /// <param name="parms">可选参数</param>
        private void UpdateMessageToMessageHub(MessageType type,dynamic[] parms = null)
        {
            if (messagehubClient != null) 
            {
                switch(type)
                {
                    case MessageType.JobQueue:
                        //更新消息服务Queue数据
                        messagehubClient.AddMessage(new MessageHub.Model.Message.MessageCUR("jobQueue", new MessageHub.Model.Message.Message(workingJobQueue.jobQueueCode, JsonConvert.SerializeObject(workingJobQueue), "", "")));
                        break;
                    case MessageType.Lane:
                        //更新消息服务Lane数据                      
                         messagehubClient.AddMessage(new MessageHub.Model.Message.MessageCUR("lane", new MessageHub.Model.Message.Message(lane.laneCode, JsonConvert.SerializeObject(lane), "", "")));                        
                        break;

                }
                
            }
        }

        private void addLog(string str)
        {
            Invoke(new MethodInvoker(() =>
            {
                LogTextBox.AppendText(DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss:ms") + "|" + str + "\r\n");
            }));


        }

        private void tabMain_Selected(object sender, TabControlEventArgs e)
        {
            if (((TabControl)sender).SelectedIndex == 1)//选中的是jobQueue Page
            {
                reload(workingJobQueue, JobQueueTree);
            }
        }


        /// <summary>
        /// 连接消息服务
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonConnectMessageHub_Click(object sender, EventArgs e)
        {
            if (null == messagehubClient)
            {
                messagehubClient = new MessageHubClient(textBoxMessageHubUrl.Text, TextBoxapiAddress.Text, textBoxLaneCode.Text);

                buttonConnectMessageHub.Enabled = false;
                tabMain.Enabled = true;

            }
            messagehubClient.HubInit();
            messagehubClient.reciveMessage += MessagehubClient_reciveMessage;
            messagehubClient.reciveStatus += MessagehubClient_reciveStatus;
            messagehubClient.reciveHubError += MessagehubClient_reciveHubError;

            ///加载节点列表
            if (null == lane)
            {
                lane = jsonUtil.LoadLaneFromLocalJson();
                workingJobQueue = jsonUtil.LoadJobQueueFromLocalJson();
            }
            reload(lane, treeLane); //默认加载lane


        }

        private void MessagehubClient_reciveHubError(string str)
        {
            addLog("From Messagehub_reciveHubError|来自消息服务错误信息" + str);
        }

        private void MessagehubClient_reciveStatus(string str)
        {
            addLog("From Messagehub_reciveStatus|来自消息服务返回状态信息" + str);
        }

        private void MessagehubClient_reciveMessage(string str)
        {
            addLog("From Messagehub_reciveMessage|来自消息服务Message信息" + str);
        }

        /// <summary>
        /// 模拟发送指令
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void button1_Click(object sender, EventArgs e)
        {
            if(buttonConnectMessageHub.Enabled==true)
            {
                MessageBox.Show("请先连接消息服务！");
                return;
            }
            string command = jsonUtil.LoadCommandFromLocalJson();
            string receiver = textBoxLaneCode.Text;
            messagehubClient.sendP2pMessge(new MessageHub.Model.Message.MessageP2p(receiver,JsonConvert.SerializeObject( command)));
        }

        /// <summary>
        /// laneButton修改并推送
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void textLaneSend_Click(object sender, EventArgs e)
        {
            UpdateData(treeLane.SelectedNode.FullPath, textLanePropertie.Text);

        }
    }
}
